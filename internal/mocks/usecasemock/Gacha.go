// Code generated by mockery v2.10.4. DO NOT EDIT.

package usecasemock

import (
	context "context"

	dto "github.com/kesyafebriana/e-wallet-api/internal/dto"
	entity "github.com/kesyafebriana/e-wallet-api/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// Gacha is an autogenerated mock type for the Gacha type
type Gacha struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *Gacha) GetAll(ctx context.Context) ([]entity.Gacha, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Gacha
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Gacha); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Gacha)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectGacha provides a mock function with given fields: ctx, request
func (_m *Gacha) SelectGacha(ctx context.Context, request *dto.GachaRequest) (*entity.Gacha, error) {
	ret := _m.Called(ctx, request)

	var r0 *entity.Gacha
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GachaRequest) *entity.Gacha); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Gacha)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.GachaRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
