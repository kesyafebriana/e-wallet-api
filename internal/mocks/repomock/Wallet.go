// Code generated by mockery v2.10.4. DO NOT EDIT.

package repomock

import (
	context "context"

	dto "github.com/kesyafebriana/e-wallet-api/internal/dto"
	entity "github.com/kesyafebriana/e-wallet-api/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// Wallet is an autogenerated mock type for the Wallet type
type Wallet struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, wallet
func (_m *Wallet) Create(ctx context.Context, wallet *dto.WalletRequest) (*entity.Wallet, error) {
	ret := _m.Called(ctx, wallet)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, *dto.WalletRequest) *entity.Wallet); ok {
		r0 = rf(ctx, wallet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.WalletRequest) error); ok {
		r1 = rf(ctx, wallet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecreaseBalance provides a mock function with given fields: ctx, request
func (_m *Wallet) DecreaseBalance(ctx context.Context, request *dto.TransactionRequest) (*entity.Wallet, error) {
	ret := _m.Called(ctx, request)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TransactionRequest) *entity.Wallet); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.TransactionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: ctx, userId
func (_m *Wallet) GetByUserId(ctx context.Context, userId int64) ([]entity.Wallet, error) {
	ret := _m.Called(ctx, userId)

	var r0 []entity.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.Wallet); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByWalletNumber provides a mock function with given fields: ctx, walletNumber
func (_m *Wallet) GetByWalletNumber(ctx context.Context, walletNumber string) ([]entity.Wallet, error) {
	ret := _m.Called(ctx, walletNumber)

	var r0 []entity.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Wallet); ok {
		r0 = rf(ctx, walletNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseBalance provides a mock function with given fields: ctx, request
func (_m *Wallet) IncreaseBalance(ctx context.Context, request *dto.TransactionRequest) (*entity.Wallet, error) {
	ret := _m.Called(ctx, request)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TransactionRequest) *entity.Wallet); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.TransactionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
