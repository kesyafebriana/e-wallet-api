// Code generated by mockery v2.10.4. DO NOT EDIT.

package repomock

import (
	context "context"

	entity "github.com/kesyafebriana/e-wallet-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Gacha is an autogenerated mock type for the Gacha type
type Gacha struct {
	mock.Mock
}

// AddGachaAttempt provides a mock function with given fields: ctx, userId
func (_m *Gacha) AddGachaAttempt(ctx context.Context, userId int64) (*entity.GachaAttempt, error) {
	ret := _m.Called(ctx, userId)

	var r0 *entity.GachaAttempt
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.GachaAttempt); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GachaAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGachaAttempt provides a mock function with given fields: ctx, id
func (_m *Gacha) DeleteGachaAttempt(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindGachaAttemptByUserId provides a mock function with given fields: ctx, userId
func (_m *Gacha) FindGachaAttemptByUserId(ctx context.Context, userId int64) ([]entity.Gacha, error) {
	ret := _m.Called(ctx, userId)

	var r0 []entity.Gacha
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.Gacha); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Gacha)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGacha provides a mock function with given fields: ctx
func (_m *Gacha) GetAllGacha(ctx context.Context) ([]entity.Gacha, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Gacha
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Gacha); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Gacha)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
